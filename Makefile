#############################################################################
# Makefile for building: AudioTechnology
# Generated by qmake (2.01a) (Qt 4.7.2) on: Tue Nov 29 16:22:40 2011
# Project:  AudioTechnology.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile AudioTechnology.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -O2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt4/mkspecs/linux-g++ -I. -I/usr/include/qt4/QtCore -I/usr/include/qt4/QtGui -I/usr/include/qt4 -I. -Iqt -Ivagg -Isrc -I.
LINK          = g++
LFLAGS        = -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = qt/dbmeter.cpp \
		qt/main.cpp \
		qt/mainwindow.cpp \
		qt/read_file.cpp \
		src/AudioBuffersQueue.cpp \
		src/AudioFile.cpp \
		src/read_file.cpp \
		src/read_file_buffer.cpp \
		src/RingBuffer.cpp \
		src/ringbuffer_test.cpp \
		src/snippets.c \
		src/utils.c \
		src/write_file.cpp \
		src/write_file_buffers.cpp \
		vagg/vagg.c \
		vagg/tests/vagg_tests.c moc_dbmeter.cpp \
		moc_mainwindow.cpp
OBJECTS       = dbmeter.o \
		main.o \
		mainwindow.o \
		read_file.o \
		AudioBuffersQueue.o \
		AudioFile.o \
		read_file.o \
		read_file_buffer.o \
		RingBuffer.o \
		ringbuffer_test.o \
		snippets.o \
		utils.o \
		write_file.o \
		write_file_buffers.o \
		vagg.o \
		vagg_tests.o \
		moc_dbmeter.o \
		moc_mainwindow.o
DIST          = /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		AudioTechnology.pro
QMAKE_TARGET  = AudioTechnology
DESTDIR       = 
TARGET        = AudioTechnology

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: AudioTechnology.pro  /usr/share/qt4/mkspecs/linux-g++/qmake.conf /usr/share/qt4/mkspecs/common/g++.conf \
		/usr/share/qt4/mkspecs/common/unix.conf \
		/usr/share/qt4/mkspecs/common/linux.conf \
		/usr/share/qt4/mkspecs/qconfig.pri \
		/usr/share/qt4/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt4/mkspecs/features/qt_functions.prf \
		/usr/share/qt4/mkspecs/features/qt_config.prf \
		/usr/share/qt4/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt4/mkspecs/features/default_pre.prf \
		/usr/share/qt4/mkspecs/features/release.prf \
		/usr/share/qt4/mkspecs/features/default_post.prf \
		/usr/share/qt4/mkspecs/features/warn_on.prf \
		/usr/share/qt4/mkspecs/features/qt.prf \
		/usr/share/qt4/mkspecs/features/unix/thread.prf \
		/usr/share/qt4/mkspecs/features/moc.prf \
		/usr/share/qt4/mkspecs/features/resources.prf \
		/usr/share/qt4/mkspecs/features/uic.prf \
		/usr/share/qt4/mkspecs/features/yacc.prf \
		/usr/share/qt4/mkspecs/features/lex.prf \
		/usr/share/qt4/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -o Makefile AudioTechnology.pro
/usr/share/qt4/mkspecs/common/g++.conf:
/usr/share/qt4/mkspecs/common/unix.conf:
/usr/share/qt4/mkspecs/common/linux.conf:
/usr/share/qt4/mkspecs/qconfig.pri:
/usr/share/qt4/mkspecs/modules/qt_phonon.pri:
/usr/share/qt4/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt4/mkspecs/features/qt_functions.prf:
/usr/share/qt4/mkspecs/features/qt_config.prf:
/usr/share/qt4/mkspecs/features/exclusive_builds.prf:
/usr/share/qt4/mkspecs/features/default_pre.prf:
/usr/share/qt4/mkspecs/features/release.prf:
/usr/share/qt4/mkspecs/features/default_post.prf:
/usr/share/qt4/mkspecs/features/warn_on.prf:
/usr/share/qt4/mkspecs/features/qt.prf:
/usr/share/qt4/mkspecs/features/unix/thread.prf:
/usr/share/qt4/mkspecs/features/moc.prf:
/usr/share/qt4/mkspecs/features/resources.prf:
/usr/share/qt4/mkspecs/features/uic.prf:
/usr/share/qt4/mkspecs/features/yacc.prf:
/usr/share/qt4/mkspecs/features/lex.prf:
/usr/share/qt4/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile AudioTechnology.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/AudioTechnology1.0.0 || $(MKDIR) .tmp/AudioTechnology1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/AudioTechnology1.0.0/ && $(COPY_FILE) --parents qt/dbmeter.h qt/mainwindow.h src/AudioBuffersQueue.hpp src/AudioFile.hpp src/functors.h src/RingBuffer.hpp src/types.hpp vagg/vagg.h vagg/vagg_macros.h .tmp/AudioTechnology1.0.0/ && $(COPY_FILE) --parents qt/dbmeter.cpp qt/main.cpp qt/mainwindow.cpp qt/read_file.cpp src/AudioBuffersQueue.cpp src/AudioFile.cpp src/read_file.cpp src/read_file_buffer.cpp src/RingBuffer.cpp src/ringbuffer_test.cpp src/snippets.c src/utils.c src/write_file.cpp src/write_file_buffers.cpp vagg/vagg.c vagg/tests/vagg_tests.c .tmp/AudioTechnology1.0.0/ && (cd `dirname .tmp/AudioTechnology1.0.0` && $(TAR) AudioTechnology1.0.0.tar AudioTechnology1.0.0 && $(COMPRESS) AudioTechnology1.0.0.tar) && $(MOVE) `dirname .tmp/AudioTechnology1.0.0`/AudioTechnology1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/AudioTechnology1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all: moc_dbmeter.cpp moc_mainwindow.cpp
compiler_moc_header_clean:
	-$(DEL_FILE) moc_dbmeter.cpp moc_mainwindow.cpp
moc_dbmeter.cpp: qt/dbmeter.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) qt/dbmeter.h -o moc_dbmeter.cpp

moc_mainwindow.cpp: qt/dbmeter.h \
		qt/mainwindow.h
	/usr/bin/moc-qt4 $(DEFINES) $(INCPATH) qt/mainwindow.h -o moc_mainwindow.cpp

compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: compiler_moc_header_clean 

####### Compile

dbmeter.o: qt/dbmeter.cpp qt/dbmeter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o dbmeter.o qt/dbmeter.cpp

main.o: qt/main.cpp qt/mainwindow.h \
		qt/dbmeter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o main.o qt/main.cpp

mainwindow.o: qt/mainwindow.cpp vagg/vagg_macros.h \
		qt/mainwindow.h \
		qt/dbmeter.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o mainwindow.o qt/mainwindow.cpp

read_file.o: qt/read_file.cpp vagg/vagg_macros.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o read_file.o qt/read_file.cpp

AudioBuffersQueue.o: src/AudioBuffersQueue.cpp src/AudioBuffersQueue.hpp \
		vagg/vagg_macros.h \
		src/types.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AudioBuffersQueue.o src/AudioBuffersQueue.cpp

AudioFile.o: src/AudioFile.cpp src/AudioFile.hpp \
		src/types.hpp \
		vagg/vagg_macros.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o AudioFile.o src/AudioFile.cpp

read_file.o: src/read_file.cpp vagg/vagg_macros.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o read_file.o src/read_file.cpp

read_file_buffer.o: src/read_file_buffer.cpp vagg/vagg_macros.h \
		src/AudioBuffersQueue.hpp \
		src/types.hpp \
		src/AudioFile.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o read_file_buffer.o src/read_file_buffer.cpp

RingBuffer.o: src/RingBuffer.cpp src/RingBuffer.hpp \
		vagg/vagg_macros.h \
		src/types.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o RingBuffer.o src/RingBuffer.cpp

ringbuffer_test.o: src/ringbuffer_test.cpp src/RingBuffer.hpp \
		vagg/vagg_macros.h \
		src/types.hpp \
		vagg/vagg.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o ringbuffer_test.o src/ringbuffer_test.cpp

snippets.o: src/snippets.c 
	$(CC) -c $(CFLAGS) $(INCPATH) -o snippets.o src/snippets.c

utils.o: src/utils.c 
	$(CC) -c $(CFLAGS) $(INCPATH) -o utils.o src/utils.c

write_file.o: src/write_file.cpp vagg/vagg_macros.h
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o write_file.o src/write_file.cpp

write_file_buffers.o: src/write_file_buffers.cpp vagg/vagg_macros.h \
		src/RingBuffer.hpp \
		src/types.hpp \
		src/AudioFile.hpp
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o write_file_buffers.o src/write_file_buffers.cpp

vagg.o: vagg/vagg.c vagg/vagg.h \
		vagg/vagg_macros.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o vagg.o vagg/vagg.c

vagg_tests.o: vagg/tests/vagg_tests.c vagg/vagg.h \
		vagg/vagg_macros.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o vagg_tests.o vagg/tests/vagg_tests.c

moc_dbmeter.o: moc_dbmeter.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_dbmeter.o moc_dbmeter.cpp

moc_mainwindow.o: moc_mainwindow.cpp 
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o moc_mainwindow.o moc_mainwindow.cpp

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

